---
name: autoscale.asg.add_node
version: '2.0'

workflows:
  add_node:
    description: Add nodes to an autoscale group
    type: direct
    input:
      - asg
    output:
      - hostname
    task-defaults:
      on-error:
        - fail
    tasks:
      get_chatops_channel:
        action: st2.kv.get
        input:
          key: 'asg.{$.asg}.channel'
        output:
          channel: "{$.get_chatops_channel.result}"
        on-success:
          - generate_new_hostname
      generate_new_hostname:
        action: autoscale.generate_random_name count=2
        publish:
          hostname: '{$.generate_new_hostname.stdout}'
        on-success:
          - get_ssh_key
          - chatops_notify_create_node
      chatops_notify_create_node:
        action: slack.post_message
        input:
          message: "OK! Spinning up additional node {$.hostname} for ASG ${.asg}"
          channel: '{$.channel}'
      get_ssh_key:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'ssh_pub_key'
        publish:
          ssh_pub_key: '{$.get_ssh_key.result}'
        on-success:
          - get_loadbalancer_id
      get_loadbalancer_id:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.loadbalancer_id'
        publish:
          loadbalancer_id: '{$.get_loadbalancer_id.result}'
        on-success:
          - get_vm_size_id
      get_vm_size_id:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.vm_size_id'
        publish:
          vm_size_id: '{$.get_vm_size_id.result}'
        on-success:
          - get_vm_image_id
      get_vm_image_id:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.vm_image_id'
        publish:
          vm_image_id: '{$.get_vm_image_id.result}'
        on-success:
          - get_dns_zone_id
      get_dns_zone_id:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.dns_zone_id'
        publish:
          dns_zone_id: '{$.get_dns_zone_id.result}'
        on-success:
          - get_domain
      get_domain:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.domain'
        publish:
          domain: '{$.get_domain.result}'
        on-success:
          - create_new_node
      create_new_node:
        action: rackspace.create_vm
        policies:
          wait-before: 1
        input:
          name: $.hostname
          flavor_id: $.vm_size_id
          image_id: $.vm_image_id
          key_material: $.ssh_pub_key
          metadata:
            asg: $.asg
        publish:
          ipv4_address: '{$.create_new_node.result.public_ips[1]}'
          ipv6_address: '{$.create_new_node.result.public_ips[0]}'
        on-success:
          - setup_ipv4_dns
          - chatops_success_node
      chatops_success_node:
        action: slack.post_message
        input:
          message: "Mission accomplished! Created new node {$.hostname}!"
          channel: '{$.channel}'
      setup_ipv4_dns:
        action: rackspace.create_dns_record
        policies:
          wait-before: 1
        input:
          name: '{$.hostname}.{$.asg}.{$.domain}'
          zone_id: $.dns_zone_id
          type: 'A'
          data: $.ipv4_address
        on-success:
          - refresh_apt_cache
          - chatops_success_dns
      chatops_success_dns:
        action: slack.post_message
        input:
          message: "DNS now setup for ${.hostname}.${.asg}.{$.domain}"
          channel: '{$.channel}'
      refresh_apt_cache:
        action: debian.apt_get_update
        input:
          hosts: $.ipv4_address
        policies:
          wait-before: 5
        on-success:
          - install_chef
      install_chef:
        action: chef.install
        input:
          hosts: $.ipv4_address
        policies:
          wait-before: 1
        publish:
        on-success:
          - provision_node
          - chatops_provision_node
      chatops_provision_node:
        action: slack.post_message
        input:
          message: "Starting Chef Provisioner for ${.hostname}..."
          channel: '{$.channel}'
      provision_node:
        action: chef.solo
        policies:
          wait-before: 1
        input:
          hosts: $.ipv4_address
          attributes: https://raw.githubusercontent.com/StackStorm/chef-st2-demo-webapp/master/runtime/dna.json
          recipe_url: https://github.com/StackStorm/chef-st2-demo-webapp/raw/master/runtime/cookbooks.tgz
          timeout: 600
        on-success:
          - add_ipv4_loadbalancer
          - chatops_success_chef
      chatops_success_chef:
        action: slack.post_message
        input:
          message: 'Node {$.hostname} successfully provisioned! Things are going so well!'
          channel: '{$.channel}'
      add_ipv4_loadbalancer:
        action: rackspace.add_node_to_loadbalancer
        policies:
          wait-before: 4
        input:
          loadbalancer_id: '{$.loadbalancer_id}'
          ip: $.ipv4_address
          port: '8080'
        on-success:
          - chatops_lb_add
      chatops_lb_add:
        action: slack.post_message
        input:
          message: 'Added ${.hostname} to lb.{$.asg}.{$.domain}.'
          channel: '{$.channel}'
