---
name: autoscale.asg.create
version: '2.0'

workflows:
  main:
    description: Add nodes to an autoscale group
    type: direct
    input:
      - asg
    output:
      - hostname
    task-defaults:
      on-error:
        - fail
    tasks:
      chatops_report:
        action: slack.post_message
        input:
          message: '{$.chatops_status}'
      generate_new_hostname:
        action: autoscale.generate_random_name count=2
        publish:
          hostname: '{$.generate_new_hostname.stdout}'
          chatops_status: '[ASG: {$.asg}] Generating new host {$.generate_new_hostname.stdout}...'
        on-success:
          - chatops_report
          - get_ssh_key
      get_ssh_key:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'ssh_pub_key'
        publish:
          ssh_pub_key: '{$.get_ssh_key.result}'
        on-success:
          - get_loadbalancer_id
      get_loadbalancer_id:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.loadbalancer_id'
        publish:
          loadbalancer_id: '{$.get_loadbalancer_id.result}'
        on-success:
          - get_vm_size_id
      get_vm_size_id:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.act}.vm_size_id'
        publish:
          vm_size_id: '{$.get_vm_size_id.result}'
        on-success:
          - get_vm_image_id
      get_vm_image_id:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.vm_image_id'
        publish:
          vm_image_id: '{$.get_vm_image_id.result}'
        on-success:
          - get_dns_zone_id
      get_dns_zone_id:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.dns_zone_id'
        publish:
          dns_zone_id: '{$.get_dns_zone_id.result}'
        on-success:
          - get_domain
      get_domain:
        action: st2.kv.get
        policies:
          wait-before: 1
        input:
          key: 'asg.{$.asg}.domain'
        publish:
          domain: '{$.get_domain.result}'
        on-success:
          - create_new_node
      create_new_node:
        action: rackspace.create_vm
        policies:
          wait-before: 1
        input:
          name: $.hostname
          flavor_id: $.vm_size_id
          image_id: $.vm_image_id
          key_material: $.ssh_pub_key
        publish:
          ipv4_addresss: '{$.create_new_node.result.public_ips[1]}'
          ipv6_addresss: '{$.create_new_node.result.public_ips[0]}'
          chatops_status: '[ASG: {$.asg}: Successfully created {$.hostname} at ${.ipv4_address}'
        on-success:
          - chatops_report
          - setup_ipv4_dns
      setup_ipv4_dns:
        action: rackspace.create_dns_record
        policies:
          wait-before: 1
        input:
          name: '{$.hostname}.{$.asg}.{$.domain}'
          zone_id: $.zone_id
          type: 'A'
          data: $.ipv4_address
        on-success:
          - refresh_apt_cache
#      create_ipv6_dns:
#        action: rackspace.create_dns_record
#        input:
#          name: '{$.hostname}.{$.asg}.{$.domain}'
#          zone_id: $.zone_id
#          type: 'AAAA'
#          data: $.ipv6_address
#        on-success:
#          - refresh_apt_cache
      refresh_apt_cache:
        action: debian.apt_get_update hosts=$.ipv4_address
        policies:
          wait-before: 10
        on-success:
          - install_chef
      install_chef:
        action: chef.install hosts=$.ipv4_address
        policies:
          wait-before: 1
        publish:
          - chatops_status: '[ASG: {$.asg}]: Preparing to provision {$.hostname}....'
        on-success:
          - provision_node
          - chatops_report
      provision_node:
        action: chef.solo
        policies:
          wait-before: 1
        input:
          hosts: $.ipv4_address
          attributes: https://raw.githubusercontent.com/StackStorm/chef-st2-demo-webapp/master/runtime/dna.json
          recipe_url: https://github.com/StackStorm/chef-st2-demo-webapp/raw/master/runtime/cookbooks.tgz
          timeout: 600
        on-success:
          - add_ipv4_loadbalancer
      add_ipv4_loadbalancer:
        action: rackspace.add_node_to_loadbalancer
        policies:
          wait-before: 1
        input:
          loadbalancer_id: $.loadbalancer_id
          ip: $.ipv4_address
          port: 8080
        publish:
          - chatops_status: '[ASG: {$.asg}]: {$.hostname} is successfully provisioned and added to loadbalancer {$.loadbalancer_id}'
        on-success:
          - chatops_report
#      add_ipv6_loadbalancer:
#        action: rackspace.add_node_to_loadbalancer
#        input:
#          loadbalancer_id: $.loadbalancer_id
#          ip: $.ipv6_address
#          port: 8080
