---
name: autoscale.asg.create
version: "2.0"

workflows:
  main:
    description: "Main workflow to provision a VM"
    type: direct
    input:
      - name
      - port
      - protocol
      - domain
      - admin_contact
      - min_nodes
      - max_nodes
      - vm_size_id
      - vm_image_id
      - expand_by
      - expand_delay
      - deflate_by
      - deflate_delay
      - channel
      - application_name
    task-defaults:
      on-error:
        - fail
    tasks:
      set_chatops_channel_key:
        action: st2.kv.set
        input:
          key: 'asg.<% $.name %>.channel'
          value: <% $.channel %>
        publish:
          notify_message: 'Starting to assemble new autoscale group: <% $.name %>... standby...'
        on-success:
          - get_current_epoch
          - notify
      get_current_epoch:
        action: autoscale.epoch
        publish:
          current_epoch: <% $.get_current_epoch.result %>
        on-success:
          - create_loadbalancer
      create_loadbalancer:
        action: rackspace.create_loadbalancer
        input:
          name: 'asg_<% $.name %>_lb'
          port: <% $.port %>
          protocol: <% $.protocol %>
        publish:
          loadbalancer_id: "<% $.create_loadbalancer.result.id %>"
          loadbalancer_ipv4: "<% $.create_loadbalancer.result.ipv4_public %>"
          loadbalancer_ipv6: "<% $.create_loadbalancer.result.ipv6_public %>"
          notify_message: "Loadbalancer created"
          kv_key: 'asg.<% $.name %>.loadbalancer_id'
          kv_value: <% str($.create_loadbalancer.result.id) %>
        on-success:
          - create_dns_zone
          - kv_store
          - notify
      create_dns_zone:
        action: rackspace.create_dns_zone
        policies:
          wait-before: 1
        input:
          name: '<% $.name %>.<% $.domain %>'
          email_address: <% $.admin_contact %>
          comment: 'ASG: <% $.name %>. Automatically created by StackStorm'
        publish:
          dns_zone_id: "<% $.create_dns_zone.result.id %>"
          notify_message: "DNS Setup for <% $.name %>.<% $.domain %>"
          kv_key: 'asg.<% $.name %>.dns_zone_id'
          kv_value: <% str($.dns_zone_id) %>
        on-success:
          - set_lb_ipv4_dns
          - kv_store
          - notify
      set_lb_ipv4_dns:
        action: rackspace.create_dns_record
        policies:
          wait-before: 1
        input:
          zone_id: <% str($.dns_zone_id) %>
          type: 'A'
          name: 'lb.<% $.name %>.<% $.domain %>'
          data: '<% $.loadbalancer_ipv4 %>'
        publish:
          notify_message: 'Loadbalancer DNS Setup, ready to be accessed at lb.<% $.name %>.<% $.domain %> [<% $.loadbalancer_ipv4 %>]'
        on-success:
          - store_min_nodes
          - notify
      store_min_nodes:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.min_nodes'
          value: <% str($.min_nodes) %>
        on-success:
          - store_max_nodes
      store_max_nodes:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.max_nodes'
          value: <% str($.max_nodes) %>
        on-success:
          - store_domain
      store_domain:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.domain'
          value: <% $.domain %>
        on-success:
          - store_vm_size_id
      store_vm_size_id:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.vm_size_id'
          value: <% str($.vm_size_id) %>
        on-success:
          - store_vm_image_id
      store_vm_image_id:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.vm_image_id'
          value: <% str($.vm_image_id) %>
        on-success:
          - store_expand_by_nodes
      store_expand_by_nodes:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.expand_by'
          value: <% str($.expand_by) %>
        on-success:
          - store_expand_delay
      store_expand_delay:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.expand_delay'
          value: <% str($.expand_delay) %>
        on-success:
          - store_last_expand_timestamp
      store_last_expand_timestamp:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.last_expand_timestamp'
          value: <% str($.current_epoch) %>
        on-success:
          - store_deflate_by_nodes
      store_deflate_by_nodes:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.deflate_by'
          value: <% str($.deflate_by) %>
        on-success:
          - store_deflate_delay
      store_deflate_delay:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.deflate_delay'
          value: <% str($.deflate_delay) %>
        on-success:
          - store_last_deflate_timestamp
      store_last_deflate_timestamp:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.last_deflate_timestamp'
          value: <% str($.current_epoch) %>
        on-success:
          - store_application_name
      store_application_name:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.application_name'
          value: <% $.application_name %>
        on-success:
          - store_incident_state
      store_incident_state:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.active_incident'
          value: "false"
        on-success:
          - store_total_nodes
      store_total_nodes:
        action: st2.kv.set
        policies:
          wait-before: 1
        input:
          key: 'asg.<% $.name %>.total_nodes'
          value: "0"
        on-success:
          - create_servers
      create_servers:
        action: autoscale.asg.add_node
        policies:
          wait-before: 1
        with-items: i in <% range(0,$.min_nodes).list() %>
        input:
          asg: <% $.name %>
        publish:
          notify_message: "WOOT! ASG <% $.name %> setup, and a whole mess of nodes have been provisioned. Go and be merry!"
        on-success:
          - notify
      notify:
        action: slack.post_message
        input:
          message: "```ASG[<% $.name %>] <% $.notify_message %>```"
          channel: <% $.channel %>
      kv_store:
        action: st2.kv.set
        input:
          key: <% $.kv_key %>
          value: <% $.kv_value %>
